/* groovylint-disable CompileStatic */

// See package rules for the fine-grained configuration in target repositories: https://docs.renovatebot.com/configuration-options/#packagerules

properties([
        parameters([
            string(name: 'projectAndRepository', description: 'PROJECT/repository'),
            string(name: 'baseBranchName', defaultValue: 'master'),
            string(name: 'reviewer', defaultValue: null),
            string(name: 'logLevel', defaultValue: 'info'),
            string(name: 'pullRequestsHourlyLimit', defaultValue: '1')
        ])
])

pipeline {
    options {
        disableConcurrentBuilds()
        disableResume()
        timeout(time: 30, unit: 'MINUTES')
        ansiColor('xterm')
        skipDefaultCheckout()
    }

    stages {
        stage('Running renovate') {
            agent {
                docker {
                    image 'renovate/renovate:latest'
                    alwaysPull false
                    // Without 'root' group, on-demand installation of external tools doesn't work
                    args '--group-add root --group-add docker -v /var/run/docker.sock:/var/run/docker.sock'
                    reuseNode true
                }
            }

            environment {
                // see https://docs.renovatebot.com/configuration-options/
                RENOVATE_ENDPOINT = env.SCM_URL
                RENOVATE_GIT_AUTHOR = env.RENOVATE_BOT_EMAIL
                RENOVATE_USERNAME = env.RENOVATE_BOT_NAME

                RENOVATE_PLATFORM = 'bitbucket-server'
                RENOVATE_GIT_FS = 'https'
                RENOVATE_BASE_BRANCHES = "${params.baseBranchName}"
                RENOVATE_PR_FOOTER = ":repeat: Generated by job: ${env.RUN_DISPLAY_URL}. Re-run it to update the pull request"
                RENOVATE_BASE_DIR = "${env.WORKSPACE}"
                RENOVATE_ALLOWED_POST_UPGRADE_COMMANDS = '.*'

                RENOVATE_ONBOARDING_BRANCH = 'task-renovate-configure'
                RENOVATE_BRANCH_PREFIX = 'task-renovate-'
                RENOVATE_COMMIT_MESSAGE_PREFIX = '[TECH] '
                RENOVATE_SEMANTIC_COMMITS = 'disabled'

                RENOVATE_REVIEWERS = "${params.reviewer == null ? '' : params.reviewer}"
                RENOVATE_REVIEWERS_FROM_CODE_OWNERS = "${params.reviewer == null ? 'true' : 'false'}"
                RENOVATE_OSV_VULNERABILITY_ALERTS = 'true'
                RENOVATE_AUTOMERGE = 'false'
                RENOVATE_PR_HOURLY_LIMIT = "${params.pullRequestsHourlyLimit}"
                LOG_LEVEL = "${params.logLevel}"
                LOG_FORMAT = 'json'
                FORCE_COLOR = '1'
            }

            steps {
                script {
                    buildName "${currentBuild.number}: ${params.projectAndRepository}"

                    withCredentials([
                        string(
                            credentialsId: 'scm-access-key',
                            variable: 'RENOVATE_PASSWORD'
                        ),
                        string(
                            credentialsId: 'renovate-release-notes-reader',
                            variable: 'GITHUB_COM_TOKEN'
                        )
                    ]) {
                        // Renovate returns 0 exit code on warnings, which we don't want to. So we parse json logs and fail if level >= WARN
                        def stdout = sh(script: "renovate ${params.projectAndRepository}", returnStdout: true).trim()
                        print stdout

                        for (line in stdout.split('\n')) {
                            def jsonObj = readJSON text: line
                            // Everything above 30 is WARN or worse: see https://docs.renovatebot.com/examples/self-hosting/#about-the-log-level-numbers
                            if (jsonObj['level'] > 30) {
                                error "Renovate repository scan failed. Reason: $jsonObj"
                            }
                        }
                    }
                }
            }
        }
    }
}
